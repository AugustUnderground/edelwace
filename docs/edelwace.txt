-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | HaskTorch Reinforcement Learning Agents for GACE
--   
--   Please see the README on GitHub at
--   <a>https://github.com/augustunderground/edelwace#readme</a>
@package edelwace
@version 0.1.0.0

module Lib

-- | Swaps the arguments of HaskTorch's foldLoop around
foldLoop' :: Int -> (a -> Int -> IO a) -> a -> IO a

-- | Because snake_case sucks
nanToNum :: Float -> Float -> Float -> Tensor -> Tensor

-- | Default limits for <a>nanToNum</a>
nanToNum' :: Tensor -> Tensor

-- | Default limits for <a>nanToNum</a> (0.0)
nanToNum'' :: Tensor -> Tensor

-- | GPU 1
gpu :: Device

-- | CPU 0
cpu :: Device

-- | Default Tensor Data Type
dataType :: DType

-- | Convert an Array to a Tensor
toTensor :: TensorLike a => a -> Tensor

-- | Create an empty Float Tensor on GPU
emptyTensor :: Tensor

-- | Convert a Scalar to a Tensor
toScalar :: Float -> Tensor

-- | Convert model to Double on GPU
toDoubleGPU :: forall a. HasTypes a Tensor => a -> a

-- | Convert model to Float on CPU
toFloatGPU :: forall a. HasTypes a Tensor => a -> a

-- | Convert model to Float on CPU
toFloatCPU :: forall a. HasTypes a Tensor => a -> a

-- | Generate a Tensor of random Integers
randomInts :: Int -> Int -> Int -> IO Tensor

-- | Info object gotten form stepping
data Info
Info :: ![String] -> ![String] -> Info
[observations] :: Info -> ![String]
[actions] :: Info -> ![String]

-- | Environment Step
data Step
Step :: ![Float] -> !Float -> !Bool -> !Info -> Step
[observation] :: Step -> ![Float]
[reward] :: Step -> !Float
[done] :: Step -> !Bool
[info] :: Step -> !Info

-- | Base Route to Hym Server
type HymURL = String

-- | Convert a Map to a Tensor where Pool index is a dimension
mapToTensor :: Map Int [Float] -> Tensor

-- | Convert Tensor to Map
tensorToMap :: Tensor -> Map Int [Float]

-- | Convert the Pooled Step Map to a Tuple
stepsToTuple :: Map Int Step -> (Tensor, Tensor, Tensor, [Info])

-- | Generic HTTP GET Request to Hym Server
hymGet :: HymURL -> String -> IO ByteString

-- | Send a POST Request to a Hym Server
hymPost :: HymURL -> String -> Value -> IO ByteString

-- | Convert a JSON Response from an ACE Server to a Map
hymPoolMap :: HymURL -> String -> IO (Map Int (Map String Float))

-- | Convert a JSON Response from an ACE Server to a List
hymPoolList :: HymURL -> String -> IO (Map Int [Float])

-- | Reset Pooled Environments on a Hym server
hymPoolReset :: HymURL -> IO (Map Int [Float])

-- | Get Random Actions from all Pooled Environments
hymPoolRandomAction :: HymURL -> IO (Map Int [Float])

-- | Perform Random Actions in all Pooled Environments
hymPoolRandomStep :: HymURL -> IO (Map Int Step)

-- | Take Steps in All Environments
hymPoolStep :: HymURL -> Map Int [Float] -> IO (Map Int Step)

-- | Generate URL to a Hym-GACE server from meta information
aceURL :: String -> String -> String -> String -> String -> HymURL

-- | Generate URL to a Hym-Gym server from meta information
gymURL :: String -> String -> String -> String -> HymURL

-- | Send a GET Request to a GACE Server Obtain the Target of Pooled GACE
--   Environments
acePoolTarget :: HymURL -> IO (Map Int (Map String Float))

-- | Action Keys from GACE Server
acePoolActKeys :: HymURL -> IO (Map Int [String])

-- | Observation Keys from GACE Server
acePoolObsKeys :: HymURL -> IO (Map Int [String])

-- | Get the SHACE logging path as a dict
shaceLogPath' :: HymURL -> IO (Map String String)

-- | Get the SHACE logging path
shaceLogPath :: HymURL -> IO String

-- | Reset a Vectorized Environment Pool
resetPool :: HymURL -> IO Tensor

-- | Reset selected Environments from Pool
resetPool' :: HymURL -> Tensor -> IO Tensor

-- | Shorthand for getting keys of pooled same envs
actKeysPool :: HymURL -> IO [String]

-- | Shorthand for getting keys of pooled same envs
obsKeysPool :: HymURL -> IO [String]

-- | Get Info without stepping
infoPool :: HymURL -> IO Info

-- | Step in an Environment
stepPool :: HymURL -> Tensor -> IO (Tensor, Tensor, Tensor, [Info])

-- | Process / Sanitize the Observations from GACE
processGace :: Tensor -> Info -> Tensor

-- | Scale reward to center
scaleRewards :: Tensor -> Float -> Tensor

-- | Create a log directory
createLogDir :: FilePath -> IO ()

-- | Setup the Logging Direcotry for SHACE
setupLogging :: FilePath -> IO ()

-- | Get SHACE Logging path to a given URL
remoteLogPath :: HymURL -> IO FilePath

-- | Append a line to the give log file
writeLoss :: Int -> Int -> String -> Float -> IO ()

-- | Append a line to the give log file
writeReward :: Int -> Int -> Int -> Float -> IO ()

-- | Convenience function for logging an entire env tensor
writeReward' :: Int -> Int -> Tensor -> IO ()

-- | Obtain current performance from a gace server and write/append to log
writeEnvLog :: FilePath -> HymURL -> IO ()

-- | Write an arbitrary Map to a log file for visualization
writeLog :: FilePath -> Map String [Float] -> IO ()
instance GHC.Show.Show Lib.Info
instance GHC.Generics.Generic Lib.Info
instance GHC.Show.Show Lib.Step
instance GHC.Generics.Generic Lib.Step
instance Data.Aeson.Types.FromJSON.FromJSON Lib.Step
instance Data.Aeson.Types.ToJSON.ToJSON Lib.Step
instance Data.Aeson.Types.FromJSON.FromJSON Lib.Info
instance Data.Aeson.Types.ToJSON.ToJSON Lib.Info

module PER

-- | Strict Simple/Naive Replay Buffer
data ReplayBuffer
ReplayBuffer :: !Tensor -> !Tensor -> !Tensor -> !Tensor -> !Tensor -> ReplayBuffer
[states] :: ReplayBuffer -> !Tensor
[actions] :: ReplayBuffer -> !Tensor
[rewards] :: ReplayBuffer -> !Tensor
[states'] :: ReplayBuffer -> !Tensor
[dones] :: ReplayBuffer -> !Tensor

-- | Create a new, empty Buffer on the CPU
makeBuffer :: ReplayBuffer

-- | Get the given indices from Buffer
bufferSample :: ReplayBuffer -> Tensor -> ReplayBuffer

-- | Uniform random sample from Replay Buffer
bufferRandomSample :: ReplayBuffer -> Int -> IO ReplayBuffer

-- | Push new memories into Buffer
bufferPush :: Int -> ReplayBuffer -> Tensor -> Tensor -> Tensor -> Tensor -> Tensor -> ReplayBuffer

-- | How many Trajectories are currently stored in memory
bufferLength :: ReplayBuffer -> Int

-- | Strict Prioritized Experience Replay Buffer
data PERBuffer
PERBuffer :: !ReplayBuffer -> !Tensor -> !Int -> !Float -> !Float -> !Int -> PERBuffer
[memories] :: PERBuffer -> !ReplayBuffer
[priorities] :: PERBuffer -> !Tensor
[capacity] :: PERBuffer -> !Int
[alpha] :: PERBuffer -> !Float
[betaStart] :: PERBuffer -> !Float
[betaFrames] :: PERBuffer -> !Int

-- | Create an empty PER Buffer
makePERBuffer :: Int -> Float -> Float -> Int -> PERBuffer

-- | Push new memories in a Buffer
perPush :: PERBuffer -> Tensor -> Tensor -> Tensor -> Tensor -> Tensor -> PERBuffer

-- | Syntactic Sugar for adding one buffer to another
perPush' :: PERBuffer -> PERBuffer -> PERBuffer

-- | Take a prioritized sample from the Buffer
perSample :: PERBuffer -> Int -> Int -> IO (ReplayBuffer, Tensor, Tensor)

-- | Update the Priorities of a Buffer
perUpdate :: PERBuffer -> Tensor -> Tensor -> PERBuffer

-- | Calculate the β exponent at a given frame
betaByFrame :: Float -> Int -> Int -> Float
instance GHC.Classes.Eq PER.ReplayBuffer
instance GHC.Show.Show PER.ReplayBuffer
instance GHC.Classes.Eq PER.PERBuffer
instance GHC.Show.Show PER.PERBuffer

module PPO
algorithm :: [Char]

module SAC.Defaults

-- | Algorithm ID
algorithm :: String

-- | Print verbose debug output
verbose :: Bool

-- | Number of episodes to play
numEpisodes :: Int

-- | How many steps to take in env
numSteps :: Int

-- | How many gradient update steps
numEpochs :: Int

-- | Number of iterations
numIterations :: Int

-- | Early stop criterion
earlyStop :: Float

-- | Size of the batches during epoch
batchSize :: Int

-- | Random seed for reproducability
rngSeed :: Int

-- | Maximum time to cut off
maxTime :: Float

-- | ACE Identifier of the Environment
aceId :: String

-- | PDK/Technology backend of the ACE Environment
aceBackend :: String

-- | ACE Environment variant
aceVariant :: Int

-- | Number of Environments
numEnvs :: Int

-- | Discount Factor
γ :: Float

-- | Smoothing Coefficient
τSoft :: Float

-- | Action Noise
εNoise :: Float

-- | Temperature Parameter
αConst :: Float

-- | Lower Variance Clipping
σMin :: Float

-- | Upper Variance Clipping
σMax :: Float

-- | Reward Scaling Factor
rewardScale :: Float

-- | Reward Scaling Factor
ρ :: Float

-- | Update Step frequency
d :: Int

-- | Priority update factor
εConst :: Float

-- | Initial weights
wInit :: Float

-- | Learning Rate for Actor / Policy
ηπ :: Tensor

-- | Learning Rate for Critic(s)
ηq :: Tensor

-- | Learning Rate for Alpha
ηα :: Tensor

-- | Optimizer Betas
β1 :: Float
β2 :: Float

-- | Maximum size of Replay Buffer
bufferSize :: Int

-- | Powerlaw Exponent
αStart :: Float

-- | Weight Exponent
βStart :: Float

-- | Weight Exponent Delay
βFrames :: Int

module SAC

-- | Algorithm ID
algorithm :: String

-- | SAC Agent
data Agent

-- | Agent constructor
makeAgent :: Int -> Int -> IO Agent

-- | Save an Agent to Disk
saveAgent :: Agent -> String -> IO ()

-- | Actor Network Forward Pass
actorForward :: ActorNet -> Tensor -> (Tensor, Tensor)

-- | Critic Network Forward Pass
criticForward :: CriticNet -> Tensor -> Tensor -> Tensor

-- | Convenience Function
criticForward' :: CriticNet -> CriticNet -> Tensor -> Tensor -> Tensor

-- | Get an Action (no grad)
act :: Agent -> Tensor -> IO Tensor

-- | Get an action and log probs (grad)
evaluate :: Agent -> Tensor -> Float -> IO (Tensor, Tensor)

-- | Train Soft Actor Critic Agent
train :: Int -> Int -> HymURL -> IO Agent
instance GHC.Classes.Eq SAC.ActorNetSpec
instance GHC.Show.Show SAC.ActorNetSpec
instance GHC.Classes.Eq SAC.CriticNetSpec
instance GHC.Show.Show SAC.CriticNetSpec
instance Torch.NN.Parameterized SAC.ActorNet
instance GHC.Show.Show SAC.ActorNet
instance GHC.Generics.Generic SAC.ActorNet
instance Torch.NN.Parameterized SAC.CriticNet
instance GHC.Show.Show SAC.CriticNet
instance GHC.Generics.Generic SAC.CriticNet
instance GHC.Show.Show SAC.Agent
instance GHC.Generics.Generic SAC.Agent
instance Torch.NN.Randomizable SAC.CriticNetSpec SAC.CriticNet
instance Torch.NN.Randomizable SAC.ActorNetSpec SAC.ActorNet

module TD3
algorithm :: [Char]
